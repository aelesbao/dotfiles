[general]
# Live config reload (changes require restart)
live_config_reload = true
import = ["~/.config/alacritty/themes/themes/catppuccin_mocha.toml"]

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
[terminal.shell]
program = "/bin/zsh"
args = ["--login"]

[env]
# If this property is not set, alacritty will set it to xterm-256color.
#
# Note that some xterm terminfo databases don't declare support for italics.
# You can verify this by checking for the presence of `smso` and `sitm` in
# `infocmp xterm-256color`.
TERM = "alacritty" # supports italic and undercurl

[font]
size = 10
normal = { family = "Hack Nerd Font", style = "Regular" }
bold = { family = "Hack Nerd Font", style = "Bold" }
italic = { family = "Hack Nerd Font", style = "Italic" }
bold_italic = { family = "Hack Nerd Font", style = "Bold Italic" }

[window]
dynamic_title = true
# Window decorations
#
# Values for `decorations`:
#     - full: Borders and title bar
#     - none: Neither borders nor title bar
#
# Values for `decorations` (macOS only):
#     - transparent: Title bar, transparent background and title bar buttons
#     - buttonless: Title bar, transparent background and no title bar buttons
decorations = "buttonless"
# Request compositor to blur content behind transparent windows.
blur = true
# Background opacity
opacity = 0.95
# Make `Option` key behave as `Alt` (macOS only):
#   - OnlyLeft
#   - OnlyRight
#   - Both
#   - None (default)
option_as_alt = "Both"
# Startup Mode (changes require restart)
#
# Values for `startup_mode`:
#   - Windowed
#   - Maximized
#   - Fullscreen
#
# Values for `startup_mode` (macOS only):
#   - SimpleFullscreen
startup_mode = "Maximized"
# Window dimensions in character columns and lines
# (changes require restart)
dimensions = { columns = 160, lines = 60 }
# Adds this many blank pixels of padding around the window
# Units are physical pixels; this is not DPI aware.
padding = { x = 2, y = 2 }

[colors]
# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors = false

[cursor]
# Cursor shape
#
# Values for `shape`:
#   - ▇ Block
#   - _ Underline
#   - | Beam
style = { shape = "Block" }
# If this is `true`, the cursor will be rendered as a hollow box when the
# window is not focused.
unfocused_hollow = true

[mouse]
# The `faux_scrollback_lines` setting controls the number
# of lines the terminal should scroll when the alternate
# screen buffer is active. This is used to allow mouse
# scrolling for applications like `man`.
#
hide_when_typing = false

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty
# captures the mouse, the `Shift` modifier is automatically added as a
# requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings for actions not exclusive to mouse mode)
#
# - Mouse exclusive actions:
#
#   - ExpandSelection
#       Expand the selection to the current mouse cursor location.
#
# And optionally:
#
# - `mods` (see key bindings)
bindings = [{ action = "PasteSelection", mouse = "Middle" }]

[selection]
save_to_clipboard = true
semantic_escape_chars = ",│`|:\"' ()[]{}<>\t"

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
[bell]
animation = "EaseOutExpo"
duration = 0

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/winit/latest/winit/keyboard/enum.NamedKey.html
#    https://docs.rs/winit/latest/winit/keyboard/enum.Key.html#variant.Dead
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
#    Reference: https://invisible-island.net/xterm/ctlseqs/ctlseqs.html
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#       Start searching toward the right of the search origin.
#   - SearchBackward
#       Start searching toward the left of the search origin.
#   - Copy
#   - Paste
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#       Remove the terminal's scrollback history.
#   - Hide
#       Hide the Alacritty window.
#   - Minimize
#       Minimize the Alacritty window.
#   - Quit
#       Quit Alacritty.
#   - ToggleFullscreen
#   - ToggleMaximized
#   - SpawnNewInstance
#       Spawn a new instance of Alacritty.
#   - CreateNewWindow
#       Create a new Alacritty window from the current process.
#   - ClearLogNotice
#       Clear Alacritty's UI warning and error notice.
#   - ClearSelection
#       Remove the active selection.
#   - ReceiveChar
#   - None
#
# - Vi mode exclusive actions:
#
#   - Open
#       Perform the action of the first matching hint under the vi mode cursor
#       with `mouse.enabled` set to `true`.
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#       Toggle semantic selection based on `selection.semantic_escape_chars`.
#   - CenterAroundViCursor
#       Center view around vi mode cursor
#
# - Vi mode exclusive cursor motion actions:
#
#   - Up
#       One line up.
#   - Down
#       One line down.
#   - Left
#       One character left.
#   - Right
#       One character right.
#   - First
#       First column, or beginning of the line when already at the first column.
#   - Last
#       Last column, or beginning of the line when already at the last column.
#   - FirstOccupied
#       First non-empty cell in this terminal row, or first non-empty cell of
#       the line when already at the first cell of the row.
#   - High
#       Top of the screen.
#   - Middle
#       Center of the screen.
#   - Low
#       Bottom of the screen.
#   - SemanticLeft
#       Start of the previous semantically separated word.
#   - SemanticRight
#       Start of the next semantically separated word.
#   - SemanticLeftEnd
#       End of the previous semantically separated word.
#   - SemanticRightEnd
#       End of the next semantically separated word.
#   - WordLeft
#       Start of the previous whitespace separated word.
#   - WordRight
#       Start of the next whitespace separated word.
#   - WordLeftEnd
#       End of the previous whitespace separated word.
#   - WordRightEnd
#       End of the next whitespace separated word.
#   - Bracket
#       Character matching the bracket at the cursor's location.
#   - SearchNext
#       Beginning of the next match.
#   - SearchPrevious
#       Beginning of the previous match.
#   - SearchStart
#       Start of the match to the left of the vi mode cursor.
#   - SearchEnd
#       End of the match to the right of the vi mode cursor.
#
# - Search mode exclusive actions:
#   - SearchFocusNext
#       Move the focus to the next search match.
#   - SearchFocusPrevious
#       Move the focus to the previous search match.
#   - SearchConfirm
#   - SearchCancel
#   - SearchClear
#       Reset the search regex.
#   - SearchDeleteWord
#       Delete the last word in the search regex.
#   - SearchHistoryPrevious
#       Go to the previous regex in the search history.
#   - SearchHistoryNext
#       Go to the next regex in the search history.
#
# - macOS exclusive actions:
#   - ToggleSimpleFullscreen
#       Enter fullscreen without occupying another space.
#
# - Linux/BSD exclusive actions:
#
#   - CopySelection
#       Copy from the selection buffer.
#   - PasteSelection
#       Paste from the selection buffer.
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Search
#    - Alt
#    - Vi
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
[keyboard]
bindings = [
  # jump to the beginning and end of word
  { key = "Left", mods = "Alt", chars = "\u001Bb" },
  { key = "Right", mods = "Alt", chars = "\u001Bf" },

  # jump to the beginning and end of line
  { key = "Left", mods = "Command", chars = "\u0001" },
  { key = "Right", mods = "Command", chars = "\u0005" },

  # window
  { key = "N", mods = "Command", action = "CreateNewWindow" },
  { key = "T", mods = "Command", action = "CreateNewTab" },

  # font control
  { key = "Key0", mods = "Command", action = "ResetFontSize" },
  { key = "Numpad0", mods = "Command", action = "ResetFontSize" },
  { key = "Equals", mods = "Command", action = "IncreaseFontSize" },
  { key = "Plus", mods = "Command", action = "IncreaseFontSize" },
  { key = "NumpadAdd", mods = "Command", action = "IncreaseFontSize" },
  { key = "Minus", mods = "Command", action = "DecreaseFontSize" },
  { key = "NumpadSubtract", mods = "Command", action = "DecreaseFontSize" },

  # tmux integration
  { key = "Return", mods = "Alt|Shift", chars = "\u001b[10;13~" },
  { key = "Key0", mods = "Control", chars = "\u001b[5;48~" },
  { key = "Key1", mods = "Control", chars = "\u001b[5;49~" },
  { key = "Key2", mods = "Control", chars = "\u001b[5;50~" },
  { key = "Key3", mods = "Control", chars = "\u001b[5;51~" },
  { key = "Key4", mods = "Control", chars = "\u001b[5;52~" },
  { key = "Key5", mods = "Control", chars = "\u001b[5;53~" },
  { key = "Key6", mods = "Control", chars = "\u001b[5;54~" },
  { key = "Key7", mods = "Control", chars = "\u001b[5;55~" },
  { key = "Key8", mods = "Control", chars = "\u001b[5;56~" },
  { key = "Key9", mods = "Control", chars = "\u001b[5;57~" },
  { key = "Key0", mods = "Control|Alt", chars = "\u001b[7;48~" },
  { key = "Key1", mods = "Control|Alt", chars = "\u001b[7;49~" },
  { key = "Key2", mods = "Control|Alt", chars = "\u001b[7;50~" },
  { key = "Key3", mods = "Control|Alt", chars = "\u001b[7;51~" },
  { key = "Key4", mods = "Control|Alt", chars = "\u001b[7;52~" },
  { key = "Key5", mods = "Control|Alt", chars = "\u001b[7;53~" },
  { key = "Key6", mods = "Control|Alt", chars = "\u001b[7;54~" },
  { key = "Key7", mods = "Control|Alt", chars = "\u001b[7;55~" },
  { key = "Key8", mods = "Control|Alt", chars = "\u001b[7;56~" },
  { key = "Key9", mods = "Control|Alt", chars = "\u001b[7;57~" },
]
