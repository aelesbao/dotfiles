#!/usr/bin/env zsh

set -euo pipefail


export GITHUB_USER="${GITHUB_USER:-aelesbao}"
export BOOTSTRAP_DIR="${0:A}.d"
export NON_INTERACTIVE=${NON_INTERACTIVE:-true}


function _log() {
  local level="${1}"
  local message="${@:$#}"
  printf "$level %s\033[0m\n" "$message"
}

function info() {
  echo
  _log "\033[1;37m∷" "${@:$#}"
}

function notice() {
  _log "\033[0;34m⁚" "${@:$#}"
}

function success() {
  echo
 _log "\033[0;32m⁚" "${@:$#}"
}

function warn() {
  echo
  _log "\033[0;33m∴" "${@:$#}"
}

function error() {
  echo
  _log "\033[0;31m⁘" "${@:$#}"
}

function msg() {
  _log "\033[0;37m⁚" "${@:$#}"
}

function fail() {
  error "${@}" >&2
  exit 1
}

function ask() {
  printf "\n\033[0;36m⁖ ${@:$#}\033[0m [y/n] ‣ "
  if read -q "choice?"; then
    echo
    return 0
  else
    echo
    return 1
  fi
}

function result() {
  local result="$?"
  local message="${@:$#}"

  if [[ "${result}" == "0" ]]; then
    success "[✔] ${message} succeeded"
  else
    error "[✖] ${message} failed"
  fi
}

function title() {
  echo
  echo -e "\033[1;35m≡ ${@:$#}\033[0m"
}

function has-command() {
  command -v "$@" >/dev/null 2>&1
}

function is-macos() {
  [[ "$OSTYPE" == darwin* ]]
}

function is-linux() {
  [[ "$OSTYPE" == linux* ]]
}

function get-distro() {
  has-command lsb_release && lsb_release -is
}

function has-pkg() {
  local pkg="${1}"

  if is-macos; then
    { brew list --formula "$pkg" || brew list --cask "$pkg" } >/dev/null 2>&1
  elif has-command dpkg-query; then
    dpkg-query -W "$pkg" >/dev/null 2>&1
  elif has-command pacman; then
    pacman -Qi "$pkg" >/dev/null 2>&1
  else
    fail "Unsupported OS: $(get-distro)"
  fi
}

function add-pkg() {
  local pkg=${@}
  msg "Installing $pkg"

  if has-command brew; then
    brew install $pkg
  elif has-command apt; then
    sudo apt install -y $pkg
  elif has-command pamac; then
    pamac install --no-confirm $pkg
  elif has-command yay; then
    yay -S --noconfirm $pkg
  elif has-command pacman; then
    sudo pacman -S --noconfirm $pkg
  else
    fail "Unsupported OS: $(get-distro)"
  fi
}

function require() {
  local pkg="${1}"
  has-pkg "$pkg" || \
    add-pkg "$pkg" || \
    fail "Failed to install $pkg"
}

function gh-latest-tag() {
  local repo="${1}"
  curl -fsSL "https://api.github.com/repos/${repo}/releases/latest" | jq -r ".tag_name"
}

function run-boot() {
  local scripts_dir="${1}"
  local scripts_filter="${2:-}"

  declare -a bootstrap_scripts
  bootstrap_scripts=($(find "$scripts_dir" -type f -name '*.zsh' | sort))
  [[ -n "$scripts_filter" ]] && bootstrap_scripts=(${(M)bootstrap_scripts:#${~scripts_filter}})

  for bootstrap in ${bootstrap_scripts[@]}; do
    if [[ -x "$bootstrap" && ! "$bootstrap" =~ "##" && ! "$bootstrap" =~ "~$" ]]; then
        echo
        notice "bootstrapping ${bootstrap:t:r}..."
        {
          source "$bootstrap"
        } || false
        result "bootstrap ${bootstrap:t:r}"
    fi
  done
}


cd "$HOME"

if [[ ! -d "$BOOTSTRAP_DIR" ]]; then
  fail "bootstrap scripts directory $BOOTSTRAP_DIR not found"
fi

if is-macos; then
  title "Running Darwin bootstrap scripts"
  run-boot "$BOOTSTRAP_DIR/macos"
elif is-linux; then
  [[ -f /etc/os-release ]] || fail "Missing /etc/os-release file"
  source /etc/os-release

  title "Running $PRETTY_NAME bootstrap scripts"
  run-boot "$BOOTSTRAP_DIR/linux" "$ID_LIKE"

  if ! (grep -q "^$USER:.*:$(command -v zsh)\$" /etc/passwd); then
    sudo chsh -s "$(command -v zsh)" "$USER"
  fi
fi

title "Running shared bootstrap scripts"
run-boot "$BOOTSTRAP_DIR/shared" "*(${(j:.zsh|:)@}.zsh)*"
