# See https://wiki.hyprland.org/Configuring/Binds/
# See https://wiki.hyprland.org/Configuring/Dispatchers/

# Bind flags:
# l -> locked, will also work when an input inhibitor (e.g. a lockscreen) is active.
# r -> release, will trigger on release of a key.
# c -> click, will trigger on release of a key or button as long as the mouse cursor stays inside binds:drag_threshold.
# g -> drag, will trigger on release of a key or button as long as the mouse cursor moves outside binds:drag_threshold.
# o -> longPress, will trigger on long press of a key.
# e -> repeat, will repeat when held.
# n -> non-consuming, key/mouse events will be passed to the active window in addition to triggering the dispatcher.
# m -> mouse, see below.
# t -> transparent, cannot be shadowed by other binds.
# i -> ignore mods, will ignore modifiers.
# s -> separate, will arbitrarily combine keys between each mod/key, see [Keysym combos](#keysym-combos) above.
# d -> has description, will allow you to write a description for your bind.
# p -> bypasses the app's requests to inhibit keybinds.

$mod = SUPER
$navMod = SUPER CONTROL
$altMod = SUPER ALT
$actionMod = SUPER CONTROL SHIFT
$hyperMod = SUPER CONTROL ALT SHIFT

# Remove existing bindings
unbind = CONTROL, Q

# <apps>

bindd = $mod, space, Opens launcher, exec, $menu
bindd = $navMod, space, Opens icon viewer, exec, $emoji
bindd = $altMod, space, Opens calculator, exec, $calc

bindd = $mod, E, Opens file explorer, exec, $fileManager
bindd = $altMod, backslash, 1Password Quick Access, exec, 1password --quick-access
bindd = $altMode, n, Notification History, exec, $notificationHistory

bindd = $mod SHIFT, v, Clipboard History, exec, $clipboardHistory
bindd = $mod SHIFT, 4, Screenshot, exec, $screenshot

# </apps>

# <system>

bindd = $mod, Q, Closes the active window, killactive,

bindd = $navMod, up, Toggle Expo, hyprexpo:expo, toggle

bindd = $mod, escape, Lock Session, exec, loginctl lock-session
bindd = $hyperMod, delete, Power off, exec, systemctl poweroff
bindd = $hyperMod, backspace, Logout, exit,

# </system>

# <workspaces>

# Navigate through existing workspaces
bind = $navMod, bracketleft,  workspace, e-1
bind = $navMod, bracketright, workspace, e+1

# Scroll through existing workspaces with mod + mouse scroll
bind = $mod, mouse_down, workspace, e-1
bind = $mod, mouse_up,   workspace, e+1

# Switch workspaces with mod + [0-9]
bind = $navMod, 1, workspace, 1
bind = $navMod, 2, workspace, 2
bind = $navMod, 3, workspace, 3
bind = $navMod, 4, workspace, 4
bind = $navMod, 5, workspace, 5
bind = $navMod, 6, workspace, 6
bind = $navMod, 7, workspace, 7
bind = $navMod, 8, workspace, 8
bind = $navMod, 9, workspace, 9
bind = $navMod, 0, workspace, 10

# Move windows to prev / next workspace
bind = $actionMod, bracketleft,  movetoworkspace, r-1
bind = $actionMod, bracketright, movetoworkspace, r+1

bind = $navMod,    S, togglespecialworkspace, media
bind = $actionMod, S, movetoworkspace,        special:media

bind = $navMod,    C, togglespecialworkspace, comms
bind = $actionMod, C, movetoworkspace,        special:comms

# </workspaces>

# <windows>

# Move focus with navMod + vim keys
bind = $navMod, h, movefocus, l
bind = $navMod, l, movefocus, r
bind = $navMod, k, movefocus, u
bind = $navMod, j, movefocus, d

# Group focus with mod + vim keys
bind = $altMod, h, changegroupactive, b
bind = $altMod, l, changegroupactive, f

# Move focus with mod
bind = $mod,       tab, cyclenext, next hist
bind = $mod SHIFT, tab, cyclenext, prev hist

# Move window with actionMod + vim keys
bind = $actionMod, h, movewindoworgroup, l
bind = $actionMod, l, movewindoworgroup, r
bind = $actionMod, k, movewindoworgroup, u
bind = $actionMod, j, movewindoworgroup, d

# Move active window to a workspace with mod + SHIFT + [0-9]
bind = $actionMod, 1, movetoworkspace, 1
bind = $actionMod, 2, movetoworkspace, 2
bind = $actionMod, 3, movetoworkspace, 3
bind = $actionMod, 4, movetoworkspace, 4
bind = $actionMod, 5, movetoworkspace, 5
bind = $actionMod, 6, movetoworkspace, 6
bind = $actionMod, 7, movetoworkspace, 7
bind = $actionMod, 8, movetoworkspace, 8
bind = $actionMod, 9, movetoworkspace, 9
bind = $actionMod, 0, movetoworkspace, 10

# Floating / Grouping
bind = $actionMod, T, togglefloating,
bind = $actionMod, G, togglegroup,

# Dwindle
bind = $actionMod, P, pseudo, 
bind = $actionMod, J, togglesplit,

# Move/resize windows with mod + LMB/RMB and dragging
bindm = $mod, mouse:272, movewindow
bindm = $mod, mouse:273, resizewindow

# </windows>

# <multimedia>

# Laptop multimedia keys for volume and LCD brightness
bindel = ,XF86AudioRaiseVolume, exec, $volUp
bindel = ,XF86AudioLowerVolume, exec, $volDown
bindel = ,XF86AudioMute, exec, $volMute
bindel = ,XF86AudioMicMute, exec, $volMicMute
bindel = ,XF86MonBrightnessUp, exec, brightnessctl s 10%+
bindel = ,XF86MonBrightnessDown, exec, brightnessctl s 10%-

# Requires playerctl
bindl = , XF86AudioNext,  exec, playerctl next
bindo = , XF86AudioNext,  exec, playerctl position +5
bindl = , XF86AudioPrev,  exec, playerctl previous
bindo = , XF86AudioPrev,  exec, playerctl position -5
bindl = , XF86AudioPlay,  exec, playerctl play-pause
bindl = , XF86AudioPause, exec, playerctl play-pause

# </multimedia>

# <submaps>

# will switch to a submap called resize
bindd = $actionMod, R, Resize Mode, submap, resize

# will start a submap called "resize"
submap = resize

# prevent any keys from passing to your active application while in a submap
# or to exit it immediately when any unknown key is pressed
# bind = , catchall, submap, reset

# sets repeatable binds for resizing the active window
binde = , left,  resizeactive, -10 0
binde = , right, resizeactive, 10 0
binde = , up,    resizeactive, 0 -10
binde = , down,  resizeactive, 0 10

binde = , h, resizeactive, -10 0
binde = , l, resizeactive, 10 0
binde = , k, resizeactive, 0 -10
binde = , j, resizeactive, 0 10

binde = SHIFT, left,  splitratio, -0.1
binde = SHIFT, right, splitratio, +0.1
binde = SHIFT, h, splitratio, -0.1
binde = SHIFT, l, splitratio, +0.1

# use reset to go back to the global submap
bind = , escape, submap, reset

# will reset the submap, which will return to the global submap
submap = reset

# Enters service control mode
# bindd = $actionMod, D, Service Control Mode, submap, servicectl

# submap = servicectl
bindd = $hyperMod, w, Restart waybar, exec, ~/.config/hypr/scripts/restart-service waybar
bindd = $hyperMod, d, Restart dunst, exec, ~/.config/hypr/scripts/restart-service dunst

# bind = , catchall, submap, reset

# submap = reset

# </submaps>
